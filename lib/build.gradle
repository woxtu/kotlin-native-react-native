apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith('iphoneos') \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds('FRAMEWORK')
        }

        fromPreset(presets.jvm, 'android')

        fromPreset(presets.js, 'js') {
            compilations.main {
                compileKotlinJs {
                    kotlinOptions {
                        moduleKind = 'commonjs'
                        outputFile = "${project.buildDir.path}/js/${project.name}.js"
                    }
                }
            }
        }
    }
    sourceSets {
        commonMain {
            kotlin {
                srcDir 'src/common'
            }
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinx_serialization_version"
                implementation "io.ktor:ktor-client:$ktor_version"
            }
        }
        mobileMain {
            dependsOn commonMain
            kotlin {
                srcDir 'src/mobile'
            }
        }
        androidMain {
            dependsOn mobileMain
            kotlin {
                srcDir 'src/android'
            }
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
                implementation "io.ktor:ktor-client-android:$ktor_version"
            }
        }
        iosMain {
            dependsOn mobileMain
            kotlin {
                srcDir 'src/ios'
            }
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serialization_version"
                implementation "io.ktor:ktor-client-ios:$ktor_version"
            }
        }
        jsMain {
            kotlin {
                srcDir 'src/js'
            }
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$kotlinx_serialization_version"
                implementation 'org.jetbrains:kotlin-extensions:1.0.1-pre.57-kotlin-1.2.71'
                implementation 'org.jetbrains:kotlin-react:16.5.2-pre.57-kotlin-1.2.71'
            }
        }
    }
}

build.doLast {
    configurations.jsCompileClasspath.each { File file ->
        copy {
            includeEmptyDirs = false

            from zipTree(file.absolutePath)
            into "${project.rootDir}/node_modules"
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith('.js') && (path.startsWith('META-INF/resources/') || !path.startsWith('META-INF/'))
            }
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, 'xcode-frameworks')
    final String mode = project.findProperty('XCODE_CONFIGURATION')?.toUpperCase() ?: 'DEBUG'

    inputs.property 'mode', mode
    dependsOn kotlin.targets.ios.compilations.main.linkTaskName('FRAMEWORK', mode)

    from { kotlin.targets.ios.compilations.main.getBinary('FRAMEWORK', mode).parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
